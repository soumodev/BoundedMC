
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND F G IFF LITERAL LPAR NOT OR PROP R RPAR U X XOR formula : PROP  formula : LITERAL  formula : NOT formula   formula : LPAR formula OR formula RPAR  formula : LPAR formula AND formula RPAR  formula : LPAR formula XOR formula RPAR  formula : LPAR formula IFF formula RPAR  formula : X formula  formula : F formula  formula : G formula  formula : LPAR formula U formula RPAR  formula : LPAR formula R formula RPAR  formula : LPAR formula RPAR '
    
_lr_action_items = {'PROP':([0,4,5,6,7,8,14,16,17,18,19,20,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'LITERAL':([0,4,5,6,7,8,14,16,17,18,19,20,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'NOT':([0,4,5,6,7,8,14,16,17,18,19,20,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'LPAR':([0,4,5,6,7,8,14,16,17,18,19,20,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'X':([0,4,5,6,7,8,14,16,17,18,19,20,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'F':([0,4,5,6,7,8,14,16,17,18,19,20,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'G':([0,4,5,6,7,8,14,16,17,18,19,20,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'$end':([1,2,3,9,11,12,13,15,27,28,29,30,31,32,],[0,-1,-2,-3,-8,-9,-10,-13,-4,-5,-6,-7,-11,-12,]),'OR':([2,3,9,10,11,12,13,15,27,28,29,30,31,32,],[-1,-2,-3,14,-8,-9,-10,-13,-4,-5,-6,-7,-11,-12,]),'AND':([2,3,9,10,11,12,13,15,27,28,29,30,31,32,],[-1,-2,-3,16,-8,-9,-10,-13,-4,-5,-6,-7,-11,-12,]),'XOR':([2,3,9,10,11,12,13,15,27,28,29,30,31,32,],[-1,-2,-3,17,-8,-9,-10,-13,-4,-5,-6,-7,-11,-12,]),'IFF':([2,3,9,10,11,12,13,15,27,28,29,30,31,32,],[-1,-2,-3,18,-8,-9,-10,-13,-4,-5,-6,-7,-11,-12,]),'U':([2,3,9,10,11,12,13,15,27,28,29,30,31,32,],[-1,-2,-3,19,-8,-9,-10,-13,-4,-5,-6,-7,-11,-12,]),'R':([2,3,9,10,11,12,13,15,27,28,29,30,31,32,],[-1,-2,-3,20,-8,-9,-10,-13,-4,-5,-6,-7,-11,-12,]),'RPAR':([2,3,9,10,11,12,13,15,21,22,23,24,25,26,27,28,29,30,31,32,],[-1,-2,-3,15,-8,-9,-10,-13,27,28,29,30,31,32,-4,-5,-6,-7,-11,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'formula':([0,4,5,6,7,8,14,16,17,18,19,20,],[1,9,10,11,12,13,21,22,23,24,25,26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> formula","S'",1,None,None,None),
  ('formula -> PROP','formula',1,'p_formula_prop','ply_parser.py',24),
  ('formula -> LITERAL','formula',1,'p_formula_literal','ply_parser.py',28),
  ('formula -> NOT formula','formula',2,'p_formula_not','ply_parser.py',32),
  ('formula -> LPAR formula OR formula RPAR','formula',5,'p_formula_or','ply_parser.py',36),
  ('formula -> LPAR formula AND formula RPAR','formula',5,'p_formula_and','ply_parser.py',40),
  ('formula -> LPAR formula XOR formula RPAR','formula',5,'p_formula_xor','ply_parser.py',44),
  ('formula -> LPAR formula IFF formula RPAR','formula',5,'p_formula_iff','ply_parser.py',48),
  ('formula -> X formula','formula',2,'p_formula_X','ply_parser.py',52),
  ('formula -> F formula','formula',2,'p_formula_F','ply_parser.py',56),
  ('formula -> G formula','formula',2,'p_formula_G','ply_parser.py',60),
  ('formula -> LPAR formula U formula RPAR','formula',5,'p_formula_U','ply_parser.py',64),
  ('formula -> LPAR formula R formula RPAR','formula',5,'p_formula_R','ply_parser.py',68),
  ('formula -> LPAR formula RPAR','formula',3,'p_formula_par','ply_parser.py',72),
]
